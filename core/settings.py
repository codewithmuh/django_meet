"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import environ
from datetime import timedelta
from pathlib import Path

from corsheaders.defaults import default_headers



env = environ.Env()
env.read_env('.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = env.str('SECRET_KEY')
SECRET_KEY = 'django-insecure-pc(gmq3uq@vcobn3pkyxmpg+lw#x-awn5=e9)$@+$!rubkvd!j'
# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = env.bool("DEBUG", default=True)
DEBUG = True

ALLOWED_HOSTS = ['*']

# CSRF_COOKIE_DOMAIN = 'localhost:8000' 
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'https://domain.com'] 

CORS_ALLOW_ALL_ORIGINS = True

# for limited allow origins add in list and uncomment it
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:8000",
]
CORS_ALLOW_HEADERS = list(default_headers) + [
    "api-key",
]
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users', #user app
    'events', #events
    'rest_framework', # Rest framework
    'corsheaders', #Cors Header
    'whitenoise.runserver_nostatic',
    'django_filters',
    'drf_yasg',

    # allauth, rest_auth, 
    'rest_framework.authtoken',
    'rest_auth',
    'rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_rest_passwordreset',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]



SESSION_COOKIE_AGE = 10 * 60
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
EXCLUDED_PATHS = [
    "/admin",
    "/api-docs",
    "/users",
    '/access_pdf_file',
    "/rest-auth/registration/account-confirm-email",
]
API_PATHS = [
    "/api/v1"
]

SECURE_API = env.bool("SECURE_API", default=True)
if SECURE_API:
    MIDDLEWARE += ['core.api_key_middleware.APIKeyMiddleware',]


ROOT_URLCONF = 'core.urls'

# Custom user model
AUTH_USER_MODEL = "users.User"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        #'DIRS': [os.path.join(FRONT_END_DIR, "build"), BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Google ReCaptcha
DRF_RECAPTCHA_SECRET_KEY = env.str("RE_CAPTCHA_SECRET_KEY", None)
if DRF_RECAPTCHA_SECRET_KEY:
    INSTALLED_APPS += [
        'drf_recaptcha'
    ]



# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'mydatabase.cryvzqlphtmv.us-east-1.rds.amazonaws.com',
        'PORT': 5432,
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AWS S3 config
AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY", "")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", "")
AWS_STORAGE_REGION = env.str("AWS_STORAGE_REGION", "")
DO_PRIVATE = env.str("DO_PRIVATE", "")
AWS_S3_REGION_NAME = AWS_STORAGE_REGION

USE_S3 = (
    AWS_ACCESS_KEY_ID
    and AWS_SECRET_ACCESS_KEY
    and AWS_STORAGE_BUCKET_NAME
    and AWS_STORAGE_REGION
)

if USE_S3:
    if DO_PRIVATE:
        AWS_DEFAULT_ACL = None
        DEFAULT_FILE_STORAGE = env.str(
            "DEFAULT_FILE_STORAGE", "auth_payment.storage_backends.PrivateMediaStorage"
        )
        AWS_QUERYSTRING_EXPIRE = 86400
        AWS_S3_SIGNATURE_VERSION = 's3v4'
        AWS_FILE_EXPIRE = 200
        AWS_PRELOAD_METADATA = True
        AWS_S3_ADDRESSING_STYLE = "virtual"
        # STATICFILES_STORAGE = 'auth_payment.storage_backends.PrivateStaticStorage'
    else:
        DEFAULT_FILE_STORAGE = env.str(
            "DEFAULT_FILE_STORAGE", "auth_payment.storage_backends.MediaStorage"
        )
        # STATICFILES_STORAGE = 'auth_payment.storage_backends.StaticStorage'
        AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL", "public-read")

    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_MEDIA_LOCATION = env.str("AWS_MEDIA_LOCATION", "media")
    AWS_AUTO_CREATE_BUCKET = env.bool("AWS_AUTO_CREATE_BUCKET", True)
    MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")
    AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    MEDIA_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_MEDIA_LOCATION)
    # s3 static settings
    AWS_STATIC_LOCATION = env.str("AWS_STATIC_LOCATION", "static")
    # STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_STATIC_LOCATION}/'
    # STATIC_ROOT = os.path.join(BASE_DIR, "static")

else:
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"

STATICFILES_DIRS = [
   # os.path.join(BASE_DIR,  'static'),
]

MEDIA_URL= "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Six Digit Token Generator
DJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {
    "CLASS": "django_rest_passwordreset.tokens.RandomNumberTokenGenerator",
    "OPTIONS": {
        "min_number": 10000,
        "max_number": 99999
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    'DEFAULT_RENDERER_CLASSES': (
        'core.custom_renderer.ApiRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/day",
        "user": "30000/day"
    },
    # 'DATETIME_FORMAT': "%m/%d/%Y",
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=15),
    "ROTATE_REFRESH_TOKEN": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

# allauth / users
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True
LOGIN_REDIRECT_URL = "users:redirect"
LOGIN_URL = "/account/login/"
ACCOUNT_ADAPTER = "users.adapters.AccountAdapter"
SOCIALACCOUNT_ADAPTER = "users.adapters.SocialAccountAdapter"
ACCOUNT_ALLOW_REGISTRATION = env.bool("ACCOUNT_ALLOW_REGISTRATION", True)
SOCIALACCOUNT_ALLOW_REGISTRATION = env.bool(
    "SOCIALACCOUNT_ALLOW_REGISTRATION", True)


#  SENDGRID Configurations
SENDGRID_API_KEY = env.str("SENDGRID_API_KEY", "")
SENDGRID_FROM_EMAIL = env.str("SENDGRID_FROM_EMAIL", "")
SENDGRID_SANDBOX_MODE_IN_DEBUG = env.str(
    "SENDGRID_SANDBOX_MODE_IN_DEBUG", False)
EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"
DEFAULT_FROM_EMAIL = SENDGRID_FROM_EMAIL

USE_GMAIL_SERVICE = env.bool("USE_GMAIL_SERVICE", False)
if USE_GMAIL_SERVICE:
    EMAIL_HOST_USER = env.str("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD", "")
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_USE_TLS = True
    EMAIL_PORT = 587
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
elif not SENDGRID_API_KEY:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

REST_AUTH_SERIALIZERS = {
    # "PASSWORD_RESET_SERIALIZER": "users.api.v1.serializers.PasswordSerializer",
    "USER_DETAILS_SERIALIZER": "users.api.v1.serializers.UserSerializer",
    'TOKEN_SERIALIZER': "users.api.v1.serializers.CustomTokenSerializer"
}
REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "users.api.v1.serializers.SignupSerializer",
}

if DEBUG:
    INSTALLED_APPS += [
        'debug_toolbar',
    ]
    MIDDLEWARE += [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]
    INTERNAL_IPS = ['127.0.0.1', ]

    DEBUG_TOOLBAR_CONFIG = {
        'INTERCEPT_REDIRECTS': False,
    }

# Swagger settings for api docs
SWAGGER_SETTINGS = {
    "DEFAULT_INFO": f"{ROOT_URLCONF}.api_info",
}


# Celery
BROKER_URL = "redis://127.0.0.1:6379/"
CELERY_RESULT_BACKEND = "redis://127.0.0.1:6379/"
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


# DJ-STRIPE SETTINGS
STRIPE_LIVE_SECRET_KEY = env.str("STRIPE_LIVE_SECRET_KEY", "")
STRIPE_TEST_SECRET_KEY = env.str("STRIPE_TEST_SECRET_KEY", "")
STRIPE_TEST_PUBLISHABLE_KEY = env.str("STRIPE_TEST_PUBLISHABLE_KEY", "")
STRIPE_LIVE_PUBLISHABLE_KEY = env.str("STRIPE_LIVE_PUBLISHABLE_KEY", "")
# Change to True in production
STRIPE_LIVE_MODE = env.bool("STRIPE_LIVE_MODE", False)
# Get it from the section in the Stripe
DJSTRIPE_WEBHOOK_SECRET = env.str("DJSTRIPE_WEBHOOK_SECRET", "whsec_xxx")
# STRIPE_OWNER_ACCOUNT_ID = env.str("STRIPE_OWNER_ACCOUNT_ID", "")
STRIPE_PRODUCT_ID = env.str("STRIPE_LIVE_PRODUCT_ID", "")

STRIPE_API_KEY = env.str("STRIPE_LIVE_SECRET_KEY", "")
if not STRIPE_LIVE_MODE:
    STRIPE_API_KEY = env.str("STRIPE_TEST_SECRET_KEY", "")
    STRIPE_PRODUCT_ID = env.str("STRIPE_TEST_PRODUCT_ID", "")

# dashboard where you added the
# webhook endpoint
# We recommend setting to True for new installations
DJSTRIPE_USE_NATIVE_JSONFIELD = True
# Set to `"id"` for all new 2.4+ installations
DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"




